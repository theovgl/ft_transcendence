{"ast":null,"code":"var _jsxFileName = \"/home/mtogbe/ft_transcendence/apps/pong/src/components/Ball.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport ballImg from '../img/Ball.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_VELOCITY = 0.3;\nconst MAX_VELOCITY = 2;\nconst BOUNCE_ACCELERATION = 1.1;\nconst WIDTH_OFFSET = 5;\nconst HEIGHT_OFFSET = 5;\nconst Ball = props => {\n  _s();\n  const [position, setPosition] = useState({\n    x: props.gameBounds.width / 2,\n    y: props.gameBounds.height / 2\n  });\n  const [percentagePos, setPercentagePos] = useState({\n    x: position.x / props.gameBounds.width * 100,\n    y: position.y / props.gameBounds.height * 100\n  });\n  const [velocity, setVelocity] = useState({\n    x: BASE_VELOCITY,\n    y: BASE_VELOCITY\n  });\n  const [bounds, setBounds] = useState({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n  const [gamebounds, setGameBounds] = useState({\n    x: props.gameBounds.x,\n    y: props.gameBounds.y,\n    width: props.gameBounds.width,\n    height: props.gameBounds.height\n  });\n  const [isColliding, setIsColliding] = useState(false);\n  const [initialSize] = useState({\n    width: props.gameBounds.width,\n    height: props.gameBounds.height\n  });\n  const ballRef = useRef(null);\n\n  // Resize Hitboxes\n  useEffect(() => {\n    const calculateHitBox = () => {\n      if (ballRef.current) {\n        const {\n          left,\n          top,\n          width,\n          height\n        } = ballRef.current.getBoundingClientRect();\n        setBounds({\n          x: left,\n          y: top,\n          width: width,\n          height: height\n        });\n      }\n      setPosition({\n        x: percentagePos.x / 100 * props.gameBounds.width,\n        y: percentagePos.y / 100 * props.gameBounds.height\n      });\n      const {\n        x,\n        y,\n        width,\n        height\n      } = props.gameBounds;\n      setGameBounds({\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    };\n    if (JSON.stringify(props.gameBounds) !== JSON.stringify(gamebounds)) calculateHitBox();\n  }, [ballRef, percentagePos.x, percentagePos.y, props.gameBounds, gamebounds]);\n\n  // Ball movement online mode\n  useEffect(() => {\n    if (props.socket !== null) {\n      props.socket.on('ball-moved', pos => {\n        setPercentagePos({\n          x: pos.x,\n          y: pos.y\n        });\n      });\n      props.socket.on('goal-scored-j2', () => {\n        const currValue = parseInt(props.scoreRight.current.innerText);\n        props.scoreRight.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\n      });\n      props.socket.on('goal-scored-j1', () => {\n        const currValue = parseInt(props.scoreLeft.current.innerText);\n        props.scoreLeft.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\n      });\n    }\n  }, [props.socket, props.scoreRight, props.scoreLeft]);\n\n  // Ball movement local mode\n  useEffect(() => {\n    if (props.socket === null) {\n      let intervalId = setInterval(() => {\n        if (props.managerRef.current && props.managerRef.current.innerText === \"\") {\n          let widthRatio = gamebounds.width / initialSize.width;\n          let heightRatio = gamebounds.height / initialSize.height;\n          let ratio = (widthRatio + heightRatio) / 2;\n          setPosition(prevPosition => ({\n            x: prevPosition.x + velocity.x * (gamebounds.width / gamebounds.height) * ratio,\n            y: prevPosition.y + velocity.y * (gamebounds.width / gamebounds.height) * ratio\n          }));\n        }\n      }, 4);\n      return () => clearInterval(intervalId);\n    }\n  }, [velocity, props.managerRef, props.socket, initialSize.height, initialSize.width, gamebounds.width, gamebounds.height]);\n\n  // Hitboxes local mode\n  useEffect(() => {\n    if (props.socket === null) {\n      let offset = {\n        left: WIDTH_OFFSET / 100 * gamebounds.width,\n        right: WIDTH_OFFSET / 100 * gamebounds.width,\n        top: (HEIGHT_OFFSET - 2) / 100 * gamebounds.height,\n        bottom: (HEIGHT_OFFSET + 2) / 100 * gamebounds.height\n      };\n      if (position.x <= 0 - offset.left || position.x + bounds.width >= gamebounds.width) {\n        setVelocity(prevVelocity => ({\n          x: prevVelocity.x < 0 ? -BASE_VELOCITY : BASE_VELOCITY,\n          y: BASE_VELOCITY\n        }));\n        setPosition(() => ({\n          x: gamebounds.width / 2,\n          y: gamebounds.height / 2\n        }));\n        if (position.x <= 0) {\n          const currValue = parseInt(props.scoreRight.current.innerText);\n          props.scoreRight.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\n        } else {\n          const currValue = parseInt(props.scoreLeft.current.innerText);\n          props.scoreLeft.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\n        }\n      }\n      if (position.y <= 0 + offset.top || position.y + bounds.height >= gamebounds.height - offset.bottom) {\n        if (!isColliding) {\n          setIsColliding(true);\n          setVelocity(prevVelocity => ({\n            x: prevVelocity.x,\n            y: -prevVelocity.y\n          }));\n        } else {\n          setIsColliding(false);\n        }\n      }\n    }\n    const ballRect = ballRef.current.getBoundingClientRect();\n    const checkCollision = (ballRect, characterRect) => {\n      if (ballRect.x > characterRect.x - characterRect.width && ballRect.x < characterRect.x + characterRect.width && ballRect.y > characterRect.y && ballRect.y < characterRect.y + characterRect.height) return true;\n      return false;\n    };\n    const collisionPhysic = (ballRect, characterRect, ref) => {\n      if (ref.current && checkCollision(ballRect, characterRect)) {\n        if (!isColliding) {\n          setIsColliding(true);\n          setVelocity(prevVelocity => ({\n            x: -(prevVelocity.x < 0 ? Math.max(prevVelocity.x * BOUNCE_ACCELERATION, -MAX_VELOCITY) : Math.min(prevVelocity.x * BOUNCE_ACCELERATION, MAX_VELOCITY)),\n            y: prevVelocity.y\n          }));\n        }\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    //const rects = [];\n    const playerRect = props.playerRef.current && props.playerRef.current.getBoundingClientRect();\n    const opponentRect = props.opponentRef.current && props.opponentRef.current.getBoundingClientRect();\n    playerRect.x += playerRect.width - playerRect.width / 2;\n    playerRect.width /= 2;\n    opponentRect.width /= 2;\n    if (!collisionPhysic(ballRect, playerRect, props.playerRef) && !collisionPhysic(ballRect, opponentRect, props.opponentRef)) setIsColliding(false);\n\n    // if ((props.playerRef.current && checkCollision(ballRect, playerRect)) ||\n    //   (props.opponentRef.current && checkCollision(ballRect, opponentRect))) {\n    //   if (!isColliding) {\n    //     setIsColliding(true);\n    //     setVelocity((prevVelocity) => ({\n    //         x: -(prevVelocity.x < 0 ? (Math.max(prevVelocity.x * BOUNCE_ACCELERATION, -MAX_VELOCITY)) :\n    //             Math.min(prevVelocity.x * BOUNCE_ACCELERATION, MAX_VELOCITY)),\n    //         y: prevVelocity.y\n    //     }));\n    //   }\n    // } else {\n    //   setIsColliding(false);\n    // }\n  }, [position, props.playerRef, props.opponentRef, props.scoreLeft, props.scoreRight, gamebounds.height, gamebounds.width, gamebounds.x, gamebounds.y, bounds.height, bounds.width, isColliding, props.socket]);\n\n  // Set Responsive position\n  useEffect(() => {\n    setPercentagePos({\n      x: position.x / gamebounds.width * 100,\n      y: position.y / gamebounds.height * 100\n    });\n  }, [position.x, position.y, gamebounds.width, gamebounds.height]);\n  return /*#__PURE__*/_jsxDEV(BallDiv, {\n    ref: ballRef,\n    x: percentagePos.x,\n    y: percentagePos.y,\n    children: /*#__PURE__*/_jsxDEV(BallDivImg, {\n      src: ballImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 7\n  }, this);\n};\n_s(Ball, \"bp1OReY7dlJJdrOfvrufoRuvwL8=\");\n_c = Ball;\nconst BallDivImg = styled.img`\nwidth: 100%;\nheight: 100%;\n`;\n_c2 = BallDivImg;\nconst BallDiv = styled.div.attrs(props => ({\n  style: {\n    width: `4%`,\n    height: `5%`,\n    left: `${props.x}%`,\n    top: `${props.y}%`\n  }\n}))`\nposition: absolute;\n`;\n_c3 = BallDiv;\nexport default Ball;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Ball\");\n$RefreshReg$(_c2, \"BallDivImg\");\n$RefreshReg$(_c3, \"BallDiv\");","map":{"version":3,"names":["React","useEffect","useState","useRef","styled","ballImg","jsxDEV","_jsxDEV","BASE_VELOCITY","MAX_VELOCITY","BOUNCE_ACCELERATION","WIDTH_OFFSET","HEIGHT_OFFSET","Ball","props","_s","position","setPosition","x","gameBounds","width","y","height","percentagePos","setPercentagePos","velocity","setVelocity","bounds","setBounds","gamebounds","setGameBounds","isColliding","setIsColliding","initialSize","ballRef","calculateHitBox","current","left","top","getBoundingClientRect","JSON","stringify","socket","on","pos","currValue","parseInt","scoreRight","innerText","scoreLeft","intervalId","setInterval","managerRef","widthRatio","heightRatio","ratio","prevPosition","clearInterval","offset","right","bottom","prevVelocity","ballRect","checkCollision","characterRect","collisionPhysic","ref","Math","max","min","playerRect","playerRef","opponentRect","opponentRef","BallDiv","children","BallDivImg","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","img","_c2","div","attrs","style","_c3","$RefreshReg$"],"sources":["/home/mtogbe/ft_transcendence/apps/pong/src/components/Ball.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport ballImg from '../img/Ball.png';\r\n\r\nconst BASE_VELOCITY = 0.3;\r\nconst MAX_VELOCITY = 2;\r\nconst BOUNCE_ACCELERATION = 1.1;\r\nconst WIDTH_OFFSET = 5;\r\nconst HEIGHT_OFFSET = 5;\r\n\r\nconst Ball = (props) => {\r\n    const [position, setPosition] = useState({\r\n      x: props.gameBounds.width / 2,\r\n      y: props.gameBounds.height / 2\r\n    });\r\n    const [percentagePos, setPercentagePos] = useState({\r\n      x: (position.x / props.gameBounds.width) * 100,\r\n      y: (position.y / props.gameBounds.height) * 100\r\n    })\r\n    const [velocity, setVelocity] = useState({\r\n      x: BASE_VELOCITY,\r\n      y: BASE_VELOCITY\r\n    });\r\n    const [bounds, setBounds] = useState({x: 0, y:0, width: 0, height: 0});\r\n    const [gamebounds, setGameBounds] = useState({\r\n      x: props.gameBounds.x,\r\n      y: props.gameBounds.y,\r\n      width: props.gameBounds.width,\r\n      height: props.gameBounds.height\r\n    })\r\n    const [isColliding, setIsColliding] = useState(false);\r\n    const [initialSize] = useState({\r\n      width: props.gameBounds.width,\r\n      height: props.gameBounds.height\r\n    })\r\n    const ballRef = useRef(null);\r\n\r\n\r\n    // Resize Hitboxes\r\n    useEffect(() => {\r\n      const calculateHitBox = () => {\r\n        if (ballRef.current)\r\n        {\r\n          const { left, top, width, height } = ballRef.current.getBoundingClientRect();\r\n          setBounds({ x: left, y: top, width: width, height: height });\r\n        }\r\n        setPosition({\r\n          x : (percentagePos.x / 100) * props.gameBounds.width,\r\n          y : (percentagePos.y / 100) * props.gameBounds.height\r\n        })\r\n        const { x, y, width, height } = props.gameBounds;\r\n        setGameBounds({x: x, y: y, width: width, height: height});\r\n      }\r\n\r\n      if (JSON.stringify(props.gameBounds) !== JSON.stringify(gamebounds))\r\n        calculateHitBox();\r\n  \r\n    }, [ballRef, percentagePos.x, percentagePos.y, props.gameBounds, gamebounds]);\r\n\r\n    // Ball movement online mode\r\n    useEffect(() => {\r\n      if (props.socket !== null) {\r\n        props.socket.on('ball-moved', (pos) => {\r\n          setPercentagePos({\r\n            x: pos.x,\r\n            y: pos.y,\r\n          })\r\n        })\r\n        props.socket.on('goal-scored-j2', () => {\r\n          const currValue = parseInt(props.scoreRight.current.innerText);\r\n          props.scoreRight.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\r\n        })\r\n        props.socket.on('goal-scored-j1', () => {\r\n          const currValue = parseInt(props.scoreLeft.current.innerText);\r\n          props.scoreLeft.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\r\n        })\r\n      }\r\n    }, [props.socket, props.scoreRight, props.scoreLeft])\r\n\r\n    // Ball movement local mode\r\n    useEffect(() => {\r\n      if (props.socket === null) {\r\n        let intervalId = setInterval(() => {\r\n          if (props.managerRef.current && props.managerRef.current.innerText === \"\")\r\n          {\r\n            let widthRatio = gamebounds.width / initialSize.width;\r\n            let heightRatio = gamebounds.height / initialSize.height;\r\n            let ratio = (widthRatio + heightRatio) / 2;\r\n            setPosition((prevPosition) => ({\r\n              x: prevPosition.x + (velocity.x * (gamebounds.width / gamebounds.height) * ratio),\r\n              y: prevPosition.y + (velocity.y * (gamebounds.width / gamebounds.height) * ratio)\r\n            }));\r\n          }\r\n        }, 4);  \r\n        return () => clearInterval(intervalId);\r\n      }\r\n    }, [velocity, props.managerRef, props.socket,\r\n      initialSize.height, initialSize.width, gamebounds.width, gamebounds.height]);\r\n\r\n    // Hitboxes local mode\r\n    useEffect(() => {\r\n      if (props.socket === null)\r\n        {\r\n          let offset = {\r\n            left : (WIDTH_OFFSET / 100) * gamebounds.width,\r\n            right : (WIDTH_OFFSET / 100) * gamebounds.width,\r\n            top : ((HEIGHT_OFFSET - 2) / 100) * gamebounds.height,\r\n            bottom : ((HEIGHT_OFFSET + 2) / 100) * gamebounds.height \r\n          }\r\n          if (position.x <= 0 - offset.left || position.x + bounds.width >= gamebounds.width) {\r\n            setVelocity((prevVelocity) => ({\r\n              x: prevVelocity.x < 0 ? -BASE_VELOCITY : BASE_VELOCITY,\r\n              y: BASE_VELOCITY\r\n            }));\r\n            setPosition(() => ({\r\n              x : gamebounds.width / 2,\r\n              y: gamebounds.height / 2\r\n            }))\r\n            if (position.x <= 0)\r\n            {\r\n              const currValue = parseInt(props.scoreRight.current.innerText);\r\n              props.scoreRight.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\r\n            }\r\n            else\r\n            {\r\n              const currValue = parseInt(props.scoreLeft.current.innerText);\r\n              props.scoreLeft.current.innerText = currValue + 1 < 10 ? '0' + (currValue + 1) : currValue + 1;\r\n            }\r\n          }\r\n          if (position.y <= 0 + offset.top || position.y + bounds.height >= gamebounds.height - offset.bottom) {\r\n            if (!isColliding) {\r\n              setIsColliding(true);\r\n              setVelocity((prevVelocity) => ({\r\n                  x: prevVelocity.x,\r\n                  y: -prevVelocity.y\r\n              }));\r\n          } else {\r\n            setIsColliding(false);\r\n          }\r\n        }\r\n      }\r\n      const ballRect = ballRef.current.getBoundingClientRect();\r\n      \r\n      const checkCollision = (ballRect, characterRect) => {\r\n        if (ballRect.x > characterRect.x - characterRect.width &&\r\n          ballRect.x < characterRect.x + characterRect.width &&\r\n          ballRect.y > characterRect.y &&\r\n          ballRect.y < characterRect.y + characterRect.height\r\n          )\r\n          return (true)\r\n        return (false)\r\n      }\r\n\r\n      const collisionPhysic = (ballRect, characterRect, ref) => {\r\n        if (ref.current && checkCollision(ballRect, characterRect))\r\n        {\r\n            if (!isColliding) {\r\n              setIsColliding(true);\r\n              setVelocity((prevVelocity) => ({\r\n                  x: -(prevVelocity.x < 0 ? (Math.max(prevVelocity.x * BOUNCE_ACCELERATION, -MAX_VELOCITY)) :\r\n                      Math.min(prevVelocity.x * BOUNCE_ACCELERATION, MAX_VELOCITY)),\r\n                  y: prevVelocity.y\r\n              }));\r\n            }\r\n            return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      //const rects = [];\r\n      const playerRect = props.playerRef.current && props.playerRef.current.getBoundingClientRect();\r\n      const opponentRect = props.opponentRef.current && props.opponentRef.current.getBoundingClientRect();\r\n      playerRect.x += playerRect.width - (playerRect.width / 2);\r\n      playerRect.width /= 2;\r\n      opponentRect.width /= 2;\r\n\r\n\r\n      if (!collisionPhysic(ballRect, playerRect, props.playerRef) &&\r\n      !collisionPhysic(ballRect, opponentRect, props.opponentRef))\r\n        setIsColliding(false);\r\n\r\n      // if ((props.playerRef.current && checkCollision(ballRect, playerRect)) ||\r\n      //   (props.opponentRef.current && checkCollision(ballRect, opponentRect))) {\r\n      //   if (!isColliding) {\r\n      //     setIsColliding(true);\r\n      //     setVelocity((prevVelocity) => ({\r\n      //         x: -(prevVelocity.x < 0 ? (Math.max(prevVelocity.x * BOUNCE_ACCELERATION, -MAX_VELOCITY)) :\r\n      //             Math.min(prevVelocity.x * BOUNCE_ACCELERATION, MAX_VELOCITY)),\r\n      //         y: prevVelocity.y\r\n      //     }));\r\n      //   }\r\n      // } else {\r\n      //   setIsColliding(false);\r\n      // }\r\n    }, [position, props.playerRef, props.opponentRef, props.scoreLeft, props.scoreRight,\r\n      gamebounds.height, gamebounds.width, gamebounds.x, gamebounds.y, bounds.height, bounds.width, isColliding, props.socket]);\r\n  \r\n    // Set Responsive position\r\n    useEffect(() => {\r\n      setPercentagePos({\r\n        x : (position.x / gamebounds.width) * 100,\r\n        y : (position.y / gamebounds.height) * 100\r\n      })\r\n    }, [position.x, position.y, gamebounds.width, gamebounds.height])\r\n\r\n    return (\r\n      <BallDiv ref={ballRef} x={percentagePos.x} y={percentagePos.y}>\r\n        <BallDivImg src={ballImg}></BallDivImg>\r\n        </BallDiv>\r\n    );\r\n  };\r\n\r\nconst BallDivImg = styled.img`\r\nwidth: 100%;\r\nheight: 100%;\r\n`;\r\n\r\nconst BallDiv = styled.div.attrs(props => ({\r\nstyle: {\r\n    width: `4%`,\r\n    height: `5%`,\r\n    left: `${props.x}%`,\r\n    top: `${props.y}%`,\r\n}\r\n}))`\r\nposition: absolute;\r\n`;\r\n\r\nexport default Ball;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}