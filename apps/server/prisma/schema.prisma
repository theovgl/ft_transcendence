datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int          @id @default(autoincrement())
  name           String				@unique
  email          String				@unique
  hashedPassword String
  firstName      String?
  lastName       String?
  level          Float        @default(0)
  role           Role         @default(USER)
  rooms          Talk[]
  messages       Message[]
  matches        Play[]
  friendProposal Friendship[] @relation("requester")
  friendRequest  Friendship[] @relation("addressee")
}

model Room {
  id       String    @id @default(uuid())
  name     String		@unique
  users    Talk[]
  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  timestamp DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
}

model Talk {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  @@id([userId, roomId])
}

model Match {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  endedAt   DateTime?
  users     Play[]
}

model Play {
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String
  score   Int    @default(0)

  @@id([userId, matchId])
}

model Friendship {
  requester   User             @relation("requester", fields: [requesterId], references: [id])
  requesterId Int
  addressee   User             @relation("addressee", fields: [addresseeId], references: [id])
  addresseeId Int
  status      FriendshipStatus @default(PENDING)

  @@id([requesterId, addresseeId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum Role {
  USER
  ADMIN
}

