datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int     @id @default(autoincrement())
  name           String  @unique
  email          String  @unique
  jwt            String?
  firstName      String?
  lastName       String?
  profilePicPath String?
  wins           Int    @default(0)
  losses         Int    @default(0)
  level          Float   @default(0)
  role           Role    @default(USER)
  friendProposal Friendship[] @relation("requester")
  friendRequest  Friendship[] @relation("addressee")
  twoFAEnabled   Boolean @default(false)
  twoFASecret    String?
  games Game[]
  @@map("Users")
  messages       Message[]
  talks         Talk[]
}

model Room {
  id       String    @id @default(uuid())
  name     String		@unique
  users    Talk[]
  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  timestamp DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
}

model Talk {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  @@id([userId, roomId])
}

model Friendship {
  requester   User             @relation("requester", fields: [requesterId], references: [id])
  requesterId Int
  addressee   User             @relation("addressee", fields: [addresseeId], references: [id])
  addresseeId Int
  status      FriendshipStatus @default(PENDING)
  @@id([requesterId, addresseeId])
}

model Game {
  id                 Int @id @default(autoincrement())

  scorePlayerOne     String
  scorePlayerTwo     String
  winnerId           String
  userIdLeft         String
  userIdRight        String
  userId             Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Games")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum Role {
  USER
  ADMIN
}
